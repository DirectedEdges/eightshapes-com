{% set title = 'Design System Doc Components' %}
  {% set title_image_path = 'design-system-doc-components' %}
  {% set deck = 'The Top 8 Reusable Components to Document a Library' %}
  {% set author = 'Nathan Curtis' %}
  {% set author_role = 'Founder of UX firm @eightshapes. Speaker. Writer. Fan of Arsenal, Hokies. Cyclist & runner. Father & husband. VT & @uchicago grad.' %}
  {% set published_date = 'Sep 13, 2016' %}
  {% set read_duration = '6 ' %}
  {% set masthead = true %}

  {% set title_tag = 'EightShapes > Articles >'  + title %}
  {% extends 'templates/article.njk' %}

  {% block main_article %}
    {% filter markdown %}

Every time, we use our library’s toolkit to build web-based doc of the library. A bit meta, for sure. The documentation is just another product made and maintained with the kit, only made by the team that made the kit itself.

Building an experience, even doc, sensitizes that team to what it feels like to use the kit, reinforcing the setup and build that their users have. During the process, a simple truth reveals itself, predictably:

The system <em>never</em> provides all the parts for you.

The library gives you [_Colors_](/articles/color-in-design-systems.html) and [_Buttons_](/articles/buttons-in-design-systems.html). Maybe a _Nav Bar_. Certainly a _Footer_. However, a library serving online shopping doesn’t need a code viewer or color swatch. So some key components you need to document a library are in fact not in the library. So you build them, just for yourself, separate from and extending the library shared with everyone else.

What do you build? Get ready to tool up! Here’s my eight favorite documentation components, why to build each, and special ingredients you can add to make each even more useful.

* * *

## #8. Spec & Token&nbsp;Tables

Well documented libraries proliferate tabular spec tables throughout, whether a reference table of CSS modifiers, a [token set](/articles/tokens-in-design-systems.html), or something else. So make a component (or three) for those you repeat over and over.

{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '2',
      image_alt = '',
      caption = '<a href="/articles/tokens-in-design-systems.html" target="_blank">Token table</a>, with available variable and corresponding values, as displayed in a section describing the “squished inset” convention.',
      class = ''
  ) }}

  {% filter markdown %}
  

Automating tabular displays helps authors use simpler syntax, promotes consistent table structure and headings, and eases maintenance for embedded data like tokens.

_Special Features_:

- Recursively cull through hierarchies to display objects with increasing levels of specificity, such as $space-s, $space-inset-s and $space-inset-squish-s.

* * *

## #7. Release&nbsp;Details

Let’s face it, you’re a product with users to reading release notes and keeping abreast of changes. While boringly administrative, release details summarize change and rout users to new additions.

{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '3',
      image_alt = '',
      caption = 'Netapp.com LUCI Library release details',
      class = ''
  ) }}

  {% filter markdown %}

So design the content well and don’t skimp on details. Ease authoring, diminish drudgery, and publish a consistent summary per release.

_Special Features_:

- Highlight the type of change: markup, style, script or spec (guidelines, instructions, etc).
- Group by type: enhancements, new items, fixes, and other changes.

* * *

## #6. Page-Level Table of&nbsp;Contents

Each component page needs a local table of contents to to scan available variations, specs and guidelines, and then navigate to each quickly. Wikipedia does it. So does Salesforce. Why can’t you?

{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '4',
      image_alt = '',
      caption = 'Sticky local navigation, with variations (above line) and additional documentation (below line)',
      class = ''
  ) }}

  {% filter markdown %}
  

System users need to know what’s there, and some components — even simple ones like _Buttons_ — have many variants. Local navigation improves awareness of and navigation to what’s available below the fold.

_Special Features_:

- Make local nav sticky in wide displays where users typically use the doc.
- Embed subsections within each primary variant or guidelines section, revealing only the current subsection based on scroll position.

* * *

## #5. Tint&nbsp;Stack

A tint stack vertically arranges many colors in a group, such as a single color across brightness values or a relevant subsystem of colors like Feedback’s red, yellow and green.

{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '5',
      image_alt = '',
      caption = '<a href="https://material.google.com/style/color.html" rel="nofollow noopener" target="_blank">Google Material Design Color</a> tint stack',
      class = ''
  ) }}

  {% filter markdown %}
  

Tint stacks display many colors compactly, offering a playground to visualize additional properties of each color.

_Special Features_:

- Identify the proper type color used on each background.
- Overlay accessibility scores such as AA or AAA.
- Mark a color that should never have text overlaid due to contrast.
- Make the block clickable to copy a hex code or, better, a system variable like $color-neutral-95.
{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '6',
      image_alt = '',
      caption = 'Tint stack of neutrals with names (95), hex codes, and text/background accessibility contrast score',
      class = ''
  ) }}

  {% filter markdown %}
  
* * *

## #4. Do &&nbsp;Don’t

In libraries full of atomic bits, apply each in a full-page composition can take innumerable forms. So while systems must support a product’s autonomy, nothing beats sensitizing your users to intended and effective uses that comparative do’s and don’ts images.

{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '7',
      image_alt = '',
      caption = 'Gorgeous diagrams and well written content about <a href="https://material.google.com/components/cards.html#cards-usage" rel="nofollow noopener" target="_blank">Google Material Design’s Card</a> component.',
      class = ''
  ) }}

  {% filter markdown %}
  

Pictures — especially comparative pictures — are far easier to scan, learn from, and recall than verbose textual guidelines. While more expensive to produce, having a do & don’t component memorably reinforces the value of this display to system authors digging in to compose doc.

_Special Features_:

- Underscore each image with green (Do) and red (Don’t) via a border color, but compose the image to avoid unintended conflicts of that border with the what’s in the image.
- Prepend the **DO** & **DON’T** systematically, separating the firm imperative from authored content.

* * *

## #3. Framed Page&nbsp;Gallery

All of your system’s customers — designers, devs, product managers, execs — must believe it’s easy to build things that look great. Nothing does that quicker than showing a diverse gallery of built _pages_, embedded (via iframes) and scaled down to shown in a single, scrolled view. They get it: we use this stuff to build things like this.

{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '8',
      image_alt = '',
      caption = 'Page gallery of embedded, fully composed page layouts, each displayed in an iFrame.',
      class = ''
  ) }}

  {% filter markdown %}
  

A scannable gallery of built things quickly sensitizes and builds belief in system validity. While a page rarely used, it’s powerful and easy to setup.

_Special Features_:

- Put users in control of page scaling (using the transform: scale() property, with a default of 0.2 or 0.25) and viewport width (to quickly toggle a gallery of page types across common device profiles).

* * *

## #2. Markdown&nbsp;Chunks

It’s gotta be simple to do the basics of long form content — headings, paragraphs, lists, images, the basics. We use Markdown, cleanly integrated into Nunjucks templating mixed with calls to other components like the Do/Don’t, spec tables, and TOCs described above.

{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '9',
      image_alt = '',
      caption = 'Markdown interspersed with other content to form a documentation page.',
      class = ''
  ) }}

  {% filter markdown %}
  

Even if you don’t use a templating system like Nunjucks, is your long form content as cleanly input and stored? A clean approach for building doc can make or break easing in contributors and migrating copy from where it’s planned, composed & edited (for my teams, Google Docs).

_Special Features_: Nah, who needs ‘em? At this point, keep the tool — and your content — clean!

* * *

## #1. Example — Code&nbsp;Pair

Nothing beats the utility of a visible, rendered example paired with it’s coded counterpart. While bells and whistles abound, it’s here where _everyone_ can see it, and developers can take the thing and use it. Any self-respecting UI toolkit enables you to see the thing and use it effortlessly.

{% endfilter %}

  {{ escom.article_figure(
      image_path = title_image_path,
      image_number = '10',
      image_alt = '',
      caption = 'Example for the <a href="https://www.lightningdesignsystem.com/components/feeds/" rel="nofollow noopener" target="_blank">Feed component in the Salesforce Lightning Design System</a>',
      class = ''
  ) }}

  {% filter markdown %}
  

_Special Features_:

- Tabs for varying code concerns: markup, @extends tooling, macro usage.
- Toggle across or simultaneously display responsive states across relevant device profiles, such as handset, tablet, desktop or small, medium, large.
- Click-to-copy, often via a button nestled into the code block’s upper right.
- Stack states (such as a \_Button\_’s default, active, hover, disabled, etc) so that you needn’t interact to see or guess what’s implemented.

  {% endfilter %}
{% endblock %}